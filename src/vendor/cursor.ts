import { _store, _restore, CSI, CR, LF, HT, BS, VT, FF, DEL, OSC, ESC, DCS, BEL } from '../utils/globals'
import { _xy, addResizeListener } from '../utils/cursorHelper'
import { log } from 'console'

export const cursor = {
    get: {
        home: ['H'],
        upScroll: ['M'],
        store: [_store],
        restore: [_restore],
        show: ['?25h'],
        hide: ['?25l'],
        storeScreen: ['?47h'],
        restoreScreen: ['?47l'],
        eraseLine: ['2K'],
        eraseLineEnd: ['K'],
        eraseLineStart: ['1K'],
        eraseScreen: ['2J'],
        eraseScreenEnd: ['J'],
        eraseScreenStart: ['1J'],
        eraseSavedLines: ['3J'],
        new: [function (this: string) { return LF + this }],
        start: [function (this: string) { return CR + this }],
        end: [function (this: string) { return this.x(terinalSize.columns - this.length) }],
        top: [function (this: string) { return this.y(0) }],
        bottom: [function (this: string) { return this.y(terinalSize.rows) }],
        Vtab: [function (this: string) { return VT + this }],
        Htab: [function (this: string) { return HT + this }],
        ESC: [function (this: string) { return ESC + this }],
        CSI: [function (this: string) { return CSI + this }],
        OSC: [function (this: string) { return OSC + this }],
        DCS: [function (this: string) { return DCS + this }],
        BEL: [function (this: string) { return BEL + this }],
        DEL: [function (this: string) { return DEL + this }],
        FF: [function (this: string) { return FF + this }],

    },

    apply: {
        xy: [_xy],
        x: ['{n}G'],
        up: ['{n}A'],
        dn: ['{n}B'],
        down: ['{n}B'],
        rt: ['{n}C'],
        right: ['{n}C'],
        lt: ['{n}D'],
        left: ['{n}D'],
        upStart: ['{n}F'],
        dnStart: ['{n}E'],
        downStart: ['{n}E'],

        key: [function (this: string, c: number, s?: number | string) { return (c ? (s ? `${CSI}${c};${s}p` : `${CSI}${c}p`) : (s ? `${CSI}${s}p` : '')) + this }],
        y: [async function (this: string, n: number) { return this.xy((await this.xy()).x, n) }],
        xyRestore: [function (this: string, x: number, y: number) { return _store + this.xy(x, y) + _restore }],
        delete: [function (this: string, n?: number) { return `${BS} ${BS}`.repeat(n ?? this.length) + this }],
        upRestore: [function (this: string, n: number) { return _store + this.up(n) + _restore }],
        dnRestore: [function (this: string, n: number) { return _store + this.dn(n) + _restore }],
        rtRestore: [function (this: string, n: number) { return _store + this.rt(n) + _restore }],
        ltRestore: [function (this: string, n: number) { return _store + this.lt(n) + _restore }],
        upStartRestore: [function (this: string, n: number) { return _store + this.upStart(n) + _restore }],
        dnStartRestore: [function (this: string, n: number) { return _store + this.dnStart(n) + _restore }],

    },
} as const
